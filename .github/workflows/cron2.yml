name: Check Expiration Dates

on:
  schedule:
    - cron: "0 0 * * *"  # Ejecuta la acción cada día a medianoche UTC
  workflow_dispatch:  # Permite ejecución manual

permissions:
  issues: write  # Requerido para crear issues
  contents: read  # Requerido para leer el JSON del repositorio

jobs:
  check-expiration:
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Configurar entorno y clonar repo
        uses: actions/checkout@v4  # Descarga el código para leer el JSON

      - name: 🔐 Autenticar GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git
          gh auth status

      - name: 📅 Comprobar clientes con expiraciones próximas
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TODAY=$(date -u +%Y-%m-%d)

          if [ ! -f certificates.json ]; then
            echo "❌ ERROR: No se encontró el archivo certificates.json"
            exit 1
          fi

          customers=$(jq -c '.[]' certificates.json)

          for row in $customers; do
              name=$(echo $row | jq -r '.name')
              expirationDate=$(echo $row | jq -r '.expirationDate')

              if [[ -z "$expirationDate" ]]; then
                  echo "⚠️ Expiration date is empty for $name, skipping..."
                  continue
              fi

              if ! date -d "$expirationDate" +%s > /dev/null 2>&1; then
                  echo "❌ ERROR: Invalid date format for $expirationDate"
                  continue
              fi

              daysLeft=$(( ($(date -d "$expirationDate" +%s) - $(date -d "$TODAY" +%s)) / 86400 ))

              if [ "$daysLeft" -lt 30 ]; then
                  echo "⚠️ Certificado de $name expira pronto, verificando si ya existe un issue..."
                  
                  gh issue list --json title --state open --search "Renovación de certificados pendiente para $name - $expirationDate" > issue_list.json 2>&1

                  if [ ! -s issue_list.json ]; then
                      echo "❌ ERROR: issue_list.json está vacío o 'gh issue list' falló."
                      continue
                  fi

                  issue_titles=$(jq -r '.[].title' issue_list.json)
                  
                  if [ -z "$issue_titles" ]; then
                      echo "   🚀 Creando issue para $name..."
                      gh issue create \
                          --title "⚠️ Renovación de certificados pendiente para $name - $expirationDate" \
                          --body "La suscripción de **$name** expira en **$daysLeft días** (Fecha de expiración: $expirationDate). ¡Revisar renovación! 🚀" \
                          --repo ${{ github.repository }} \
                          --label "expiration"
                  else
                      echo "   ✅ Ya existe un issue para $name, no se creará otro."
                  fi
              fi
          done