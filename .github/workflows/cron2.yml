name: Check Expiration Dates

on:
  schedule:
    - cron: "0 0 * * *"  # Ejecuta la acci√≥n cada d√≠a a medianoche UTC
  workflow_dispatch:  # Permite ejecuci√≥n manual

permissions:
  issues: write  # Required to create issues
  contents: read  # Required to read repository data

jobs:
  check-expiration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4  # Descarga el c√≥digo para leer el JSON

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git
          gh auth status

      - name: Check Expiring Customers
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TODAY=$(date -u +%Y-%m-%d)
          echo "Fecha de hoy: $TODAY"

          customers=$(jq -c '.[]' certificates.json)

          for row in $customers; do
              name=$(echo $row | jq -r '.name')
              expirationDate=$(echo $row | jq -r '.expirationDate')

              echo "Cliente: $name - Expiration Date: $expirationDate"

              if [[ -z "$expirationDate" ]]; then
                  echo "‚ö†Ô∏è Expiration date is empty for $name, skipping..."
                  continue
              fi

              # Ensure date command works
              if ! date -d "$expirationDate" +%s > /dev/null 2>&1; then
                  echo "‚ùå Invalid date format for $expirationDate"
                  continue
              fi

              daysLeft=$(( ($(date -d "$expirationDate" +%s) - $(date -d "$TODAY" +%s)) / 86400 ))

              echo "Cliente: $name - Expira en $daysLeft d√≠as"

                            if [ "$daysLeft" -lt 30 ]; then
                  echo "Expira pronto, verificando si ya existe un issue..."

                  # Check if `gh issue list` runs correctly
                  if ! gh issue list --json title --state open --search "$name" > issue_list.json; then
                      echo "‚ö†Ô∏è Error running 'gh issue list', skipping issue creation."
                      gh auth status
                      continue
                  else
                    echo "ELSE"
                  fi

                  echo "debug1"
                  if ! issue_titles=$(jq -r '.[].title' issue_list.json); then
                      echo "‚ö†Ô∏è Error parsing issue_list.json with jq"
                      continue
                  fi

                  echo "IT: $issue_titles"

                  if ! issue_exists=$(echo "$issue_titles" | grep -c "$name"); then
                      echo "‚ö†Ô∏è Error with grep command"
                      continue
                  fi
                  echo "debug2"

                  if [ "$issue_exists" -eq 0 ]; then
                      echo "Creando issue para $name..."
                      gh issue create \
                          --title "‚ö†Ô∏è Renovaci√≥n pendiente para $name" \
                          --body "La suscripci√≥n de **$name** expira en **$daysLeft d√≠as** (Fecha de expiraci√≥n: $expirationDate). ¬°Revisar renovaci√≥n! üöÄ" \
                          --repo ${{ github.repository }}
                  else
                      echo "Ya existe un issue para $name, no se crear√° otro."
                  fi
              fi
          done